@page "/"
@using DevelopmentProjectErrorBoardUI.Models
@using DevelopmentProjectErrorBoardUI.Enums
@using System.ComponentModel
@using System.Text.Json
@using DevelopmentProjectErrorBoardUI.Services.Interfaces
@inject IErrorService ErrorService
@inject IJSRuntime JSRuntime

<PageTitle>Error Monitor</PageTitle>

@if (!IsLoggedIn)
{
    <LoginPopup/>
}
else
{
    @if (errors == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <h2 id="errors-heading">Errors</h2>

        @if (errors.Count == 0)
        {
            <h2>
                No errors to resolve at this time
            </h2>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Project</th>
                    <th>File</th>
                    <th>Line</th>
                    <th>Agent Id</th>
                    <th>Message</th>
                    <th>Developer</th>
                    <th>Status</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>

                @foreach (var project in projects)
                {
                    <tr>
                        <h5 id="projectText">
                            @if (errors.Any(x => x.Error.ProjectId == project.ProjectId))
                            {
                                @project.ProjectName
                            }
                        </h5>
                    </tr>
                    @foreach (var error in errors.Where(x => x.Error.ProjectId == project.ProjectId))
                    {
                        <tr class="mainFile">
                            
                            @if (error.LogPaths.Any())
                            {
                                <button @onclick="() => ToggleExpand(error.Error.ErrorId)" id="dropDownArrow">
                                    @if (expandedStates.TryGetValue(error.Error.ErrorId, out var expanded) && expanded)
                                    {
                                        <img src="up_arrow.png" alt="Button Image"/>
                                    }
                                    else
                                    {
                                        <img src="down_arrow.png" alt="Button Image"/>
                                    }
                                </button>
                            }
                            else
                            {
                                <td></td>
                            }
                            <td> @error.Error.InitialFile </td>
                            <td> @error.Error.LineNumber </td>
                            <td> @error.Error.AgentId </td>
                            <td> @error.Error.Message </td>
                            <td>
                                <select
                                    value="@(error.Error.DeveloperId ?? 1)"
                                    class="select-element"
                                    @onchange="@(args => updateDeveloper(error.Error.ErrorId, args.Value.ToString()))">
                                    @foreach (var dev in developers)
                                    {
                                        <option value="@dev.UserId">@dev.FirstName @(dev.UserId == 1 ? "" : "." + dev.LastName[0])</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <select value="@((StatusEnum)error.Error.StatusId)" class="select-element"
                                        @onchange="@(args => updateError(new UpdateErrorStatusModel { ErrorId = error.Error.ErrorId, StatusId = (int)(StatusEnum)Enum.Parse(typeof(StatusEnum), args.Value.ToString()), AgentId = error.Error.AgentId, CustomerId = error.Error.CustomerId, DevId = devId }))"
                                        disabled="@(error.Error.DeveloperId == null || error.Error.DeveloperId == 1 ? "disabled" : null)">
                                    @foreach (var st in statuses)
                                    {
                                        <option value="@st">@GetEnumDescription(st)</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <button id="closeBtn" @onclick="() => deactivateError(new DeactivateErrorModel { ErrorId = error.Error.ErrorId })">Close</button>
                            </td>

                        </tr>

                        @if (expandedStates.TryGetValue(error.Error.ErrorId, out var isExpanded) && isExpanded)
                        {
                            @foreach (var path in error.LogPaths)
                            {
                                <tr>
                                    <td class="emptyTd"></td>
                                    <td class="emptyTd"></td>
                                    <td>@path.FileName</td>
                                    <td>@path.CreatedDate</td>
                                </tr>
                            }
                        }
                    }
                }
                </tbody>
            </table>
        }
    }
}

@code {

    List<StatusEnum> statuses = Enum.GetValues(typeof(StatusEnum)).Cast<StatusEnum>().ToList();
    List<ErrorAndPathModel> errors;
    List<UserModel> developers;
    List<ProjectModel> projects;
    bool IsLoggedIn { get; set; }
    int devId { get; set; }

    private Dictionary<int, bool> expandedStates = new();

    protected override async Task OnInitializedAsync()
    {
        var isLoggedInJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "loggedIn");
        if (!string.IsNullOrEmpty(isLoggedInJson))
        {
            IsLoggedIn = JsonSerializer.Deserialize<bool>(isLoggedInJson);
        }

        if (IsLoggedIn)
        {
            devId = JsonSerializer.Deserialize<int>(await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId"));

            errors = await ErrorService.GetErrorsAsync();

            developers = await ErrorService.GetDevelopersAsync();

            projects = await ErrorService.GetProjectsAsync();

            foreach (var u in developers)
            {
                Console.WriteLine(u.EmailAddress);
            }

            foreach (var er in errors)
            {
                ToggleExpand(er.Error.ErrorId);
            }

            Console.WriteLine(statuses);
        }

        Console.WriteLine(statuses);
    }

    async Task updateError(UpdateErrorStatusModel model)
    {
        errors = await ErrorService.UpdateErrorStatusAsync(model);
    }

    async Task deactivateError(DeactivateErrorModel model)
    {
        errors = await ErrorService.DeactivateError(model);
    }

    async Task updateDeveloper(int errorId, string devId)
    {
        errors = await ErrorService.UpdateErrorsAssignedDeveloperAsync(new UpdateErrorsAssignedDeveloperModel { ErrorId = errorId, DevId = Convert.ToInt32(devId) });
    }

    static string GetEnumDescription(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = (DescriptionAttribute)Attribute.GetCustomAttribute(field, typeof(DescriptionAttribute));
        return attribute == null ? value.ToString() : attribute.Description;
    }

    private void ToggleExpand(int errorId)
    {
        if (expandedStates.ContainsKey(errorId))
        {
            expandedStates[errorId] = !expandedStates[errorId];
        }
        else
        {
            expandedStates.Add(errorId, true);
        }
    }

}

@*reference 
https://stackoverflow.com/questions/12169443/get-dictionary-value-by-key*@