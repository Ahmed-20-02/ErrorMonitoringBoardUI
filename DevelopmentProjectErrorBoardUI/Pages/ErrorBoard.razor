@page "/errorBoard"
@using DevelopmentProjectErrorBoardUI.Services
@using DevelopmentProjectErrorBoardUI.Models
@using Newtonsoft.Json;
@using System.Net
@using DevelopmentProjectErrorBoardUI.Enums
@inject HttpClient Http
@inject IErrorService ErrorService

<PageTitle>Error Monitor</PageTitle>

<h1>Errors</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (errors == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>
        @errors.Count
    </h1>
    
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th>...</th>
            </tr>
        </thead>
        <tbody>
        @foreach(var error in errors)
            {
                <tr>
                    <td>@error.Error.InitialFile</td>
                    <td>@error.Error.LineNumber</td>
                    <td>@error.Error.AgentId</td>
                    <td>@error.Error.DeveloperId</td>
                    <td> <button @onclick="() => removeError(error.Error.ErrorId)">Remove</button> </td>
                    
                    <td> <select value="@((StatusEnum)error.Error.StatusId)" class="select-element" 
                                 @onchange="@(args => updateError(error.Error.ErrorId, args.Value.ToString()))">
                             @foreach (var st in statuses)
                             {
                                 <option value="@st">@st</option> 
                             }
                    </select> 
                    </td>
                </tr>
                @foreach (var path in error.LogPaths)
                {
                    <tr>
                        <td></td> 
                        <td>@path.FileName</td> 
                        <td>@path.CreatedDate</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    
    List<StatusEnum> statuses = Enum.GetValues(typeof(StatusEnum)).Cast<StatusEnum>().ToList();
   List<ErrorAndPathModel> errors;

    protected override async Task OnInitializedAsync()
    {
       errors = await ErrorService.GetAllErrorsAsync();
    }

    void removeError(int errorId )
    {
        Console.WriteLine($"Error Id {errorId} has been removed");
    }
    
    void updateError(int errorId, string testStatus )
    {
        Console.WriteLine($"Error Id {errorId} has been updated with new status {testStatus}");
    }
}
