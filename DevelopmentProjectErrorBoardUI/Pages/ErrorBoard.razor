@page "/"//errorboard
@using DevelopmentProjectErrorBoardUI.Services
@using DevelopmentProjectErrorBoardUI.Models
@using DevelopmentProjectErrorBoardUI.Enums
@using System.ComponentModel
@using System.Text.Json
@inject IErrorService ErrorService
@inject IJSRuntime JSRuntime

<PageTitle>Error Monitor</PageTitle>

@if (!IsLoggedIn)
{
    <LoginPopup />
}
else
{
    @if (errors == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h2>Errors</h2>

        @if (errors.Count == 0)
        {
            <h2>
                No errors to resolve at this time
            </h2>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th></th>
                    <th>File</th>
                    <th>Line</th>
                    <th>Agent Id</th>
                    <th>Dev Id</th>
                    <th>Status</th>
                    <th>Delete</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var error in errors)
                {
                    <tr>
                        <button @onclick="() => ToggleExpand(error.Error.ErrorId)" id="dropDownArrow">
                            @if (expandedStates.TryGetValue(error.Error.ErrorId, out var expanded) && expanded)
                            {
                                <img src="up_arrow.png" alt="Button Image"/>
                            }
                            else
                            {
                                <img src="down_arrow.png" alt="Button Image"/>
                            }
                            
                        </button>
                        <td>@error.Error.InitialFile</td>
                        <td>@error.Error.LineNumber</td>
                        <td>@error.Error.AgentId</td>
                        <td>@error.Error.DeveloperId</td>
                        <td>
                            <select value="@((StatusEnum)error.Error.StatusId)" class="select-element"
                                    @onchange="@(args => updateError(new UpdateErrorStatusModel { ErrorId = error.Error.ErrorId, StatusId = (int)(StatusEnum)Enum.Parse(typeof(StatusEnum), args.Value.ToString()), AgentId = error.Error.AgentId, CustomerId = error.Error.CustomerId, DevId = devId /*error.Error.DeveloperId */ }))">
                                @foreach (var st in statuses)
                                {
                                    <option value="@st">@GetEnumDescription(st)</option>
                                }
                            </select>
                        </td>
                        <td> <button @onclick="() => removeError(error.Error.ErrorId)">Remove</button> </td>

                    </tr>
                    
                    @*@if (expandedStates.TryGetValue(error.Error.ErrorId, out var isExpanded) && isExpanded)
                    {
                        <table>
                            <thead>
                            <tr>
                                <th>File Name</th>
                                <th>Created Date</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var path in error.LogPaths)
                            {
                                <tr>
                                    <td>@path.FileName</td>
                                    <td>@path.CreatedDate</td>
                                </tr>
                            }
                                </tbody>
                        </table>
                    }*@

                   
                    @if(expandedStates.TryGetValue(error.Error.ErrorId, out var isExpanded) && isExpanded)
                    {
                        @foreach (var path in error.LogPaths)
                        {
                            <tr>
                                <td></td>
                                <td>@path.FileName</td>
                                <td>@path.CreatedDate</td>
                            </tr>
                        }
                    }
                }
                </tbody>
            </table>
        }
    }
}

@code {
    
    List<StatusEnum> statuses = Enum.GetValues(typeof(StatusEnum)).Cast<StatusEnum>().ToList();
   List<ErrorAndPathModel> errors;
   bool IsLoggedIn { get; set; }
   int devId { get; set; }
   
   private Dictionary<int, bool> expandedStates = new();
   
    protected override async Task OnInitializedAsync()
    {
        var isLoggedInJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "loggedIn");
        if (!string.IsNullOrEmpty(isLoggedInJson))
        {
            IsLoggedIn = JsonSerializer.Deserialize<bool>(isLoggedInJson);
        }
    
        if (!IsLoggedIn)
        {
            // Ensure the blur effect is applied to the background
           // await JSRuntime.InvokeVoidAsync("document.body.classList.add", "blur");
        }
        else
        {
            devId = JsonSerializer.Deserialize<int>(await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId"));
            
            errors = await ErrorService.GetAllErrorsAsync();

            foreach (var er in errors)
            {
                ToggleExpand(er.Error.ErrorId);
            }
            
            Console.WriteLine(statuses);
        }
       Console.WriteLine(statuses);
    }

    void removeError(int errorId )
    {
        Console.WriteLine($"Error Id {errorId} has been removed");
    }
    
    async Task updateError(UpdateErrorStatusModel model)
    {
        errors = await ErrorService.UpdateErrorStatusAsync(model);
    }
    
    static string GetEnumDescription(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = (DescriptionAttribute)Attribute.GetCustomAttribute(field, typeof(DescriptionAttribute));
        return attribute == null ? value.ToString() : attribute.Description;
    }
    
    private void ToggleExpand(int errorId)
    {
        if (expandedStates.ContainsKey(errorId))
        {
            expandedStates[errorId] = !expandedStates[errorId];
        }
        else
        {
            expandedStates.Add(errorId, true);
        }
    }
}

@*reference 
https://stackoverflow.com/questions/12169443/get-dictionary-value-by-key*@