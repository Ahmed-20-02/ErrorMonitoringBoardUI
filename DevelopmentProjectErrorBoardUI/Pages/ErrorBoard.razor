@page "/"//errorboard
@using DevelopmentProjectErrorBoardUI.Services
@using DevelopmentProjectErrorBoardUI.Models
@using DevelopmentProjectErrorBoardUI.Enums
@using System.ComponentModel
@using System.Text.Json
@inject IErrorService ErrorService
@inject IJSRuntime JSRuntime

<PageTitle>Error Monitor</PageTitle>

@if (!IsLoggedIn)
{
    <LoginPopup />
}
else
{
    @if (errors == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h2>Errors</h2>

        @if (errors.Count == 0)
        {
            <h2>
                No errors to resolve at this time
            </h2>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>File</th>
                    <th>Line</th>
                    <th>Agent Id</th>
                    <th>Dev Id</th>
                    <th>Status</th>
                    <th>Delete</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var error in errors)
                {
                    <tr>
                        <td>@error.Error.InitialFile</td>
                        <td>@error.Error.LineNumber</td>
                        <td>@error.Error.AgentId</td>
                        <td>@error.Error.DeveloperId</td>
                        <td>
                            <select value="@((StatusEnum)error.Error.StatusId)" class="select-element"
                                    @onchange="@(args => updateError( /*error.Error.ErrorId, args.Value.ToString(), error.Error.AgentId*/new UpdateErrorStatusModel() { ErrorId = error.Error.ErrorId, StatusId = (int)(StatusEnum)Enum.Parse(typeof(StatusEnum), args.Value.ToString()), AgentId = error.Error.AgentId, CustomerId = error.Error.CustomerId, DevId = error.Error.DeveloperId }))">
                                @foreach (var st in statuses)
                                {
                                    <option value="@st">@GetEnumDescription(st)</option>
                                }
                            </select>
                        </td>
                        <td> <button @onclick="() => removeError(error.Error.ErrorId)">Remove</button> </td>

                    </tr>
                    @foreach (var path in error.LogPaths)
                    {
                        <tr>
                            <td></td>
                            <td>@path.FileName</td>
                            <td>@path.CreatedDate</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        }
    }
}

@code {
    
    List<StatusEnum> statuses = Enum.GetValues(typeof(StatusEnum)).Cast<StatusEnum>().ToList();
   List<ErrorAndPathModel> errors;
   bool IsLoggedIn { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var isLoggedInJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "loggedIn");
        if (!string.IsNullOrEmpty(isLoggedInJson))
        {
            // Parse the retrieved value as boolean
            IsLoggedIn = JsonSerializer.Deserialize<bool>(isLoggedInJson);
        }
    
        if (!IsLoggedIn)
        {
            // Ensure the blur effect is applied to the background
            await JSRuntime.InvokeVoidAsync("document.body.classList.add", "blur");
        }
        else
        {
            errors = await ErrorService.GetAllErrorsAsync();
            Console.WriteLine(statuses);
        }
      // errors = await ErrorService.GetAllErrorsAsync();
       Console.WriteLine(statuses);
    }

    void removeError(int errorId )
    {
        Console.WriteLine($"Error Id {errorId} has been removed");
    }
    
    async Task updateError(UpdateErrorStatusModel model/*int errorId, string newStatus, int agentId*/ )
    {
        errors = await ErrorService.UpdateErrorStatusAsync( /*errorId, (int)(StatusEnum)Enum.Parse(typeof(StatusEnum), newStatus), agentId*/ model);
        // Console.WriteLine($"Error Id {errorId} has been updated with new status {newStatus}");
    }
    
    static string GetEnumDescription(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = (DescriptionAttribute)Attribute.GetCustomAttribute(field, typeof(DescriptionAttribute));
        return attribute == null ? value.ToString() : attribute.Description;
    }
}
